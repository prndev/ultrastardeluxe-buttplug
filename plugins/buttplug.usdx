--[[
buttplug.io for UltraStar Deluxe Karaoke Game
„Plug-in and Sing“

The toy's intensity increases with the player's rating (as indicated with the small bar below the points).

For reasons beyond my understanding, the relative imports can only work
when the plugins folder is the working directory.
]]

local update_interval_ms = 1000 -- adjust to your linking

function nop()
end

function plugin_init()
  register('buttplug', '1.00', 'prndev', 'https://github.com/prndev')

  require('math')
  require('Usdx.Party')
  require('Usdx.ScreenSing')

  local Mode = {}
  Mode.Name = 'Buttplug'
  Mode.CanNonParty = true
  Mode.CanParty = true
  Mode.BeforeSing = 'BeforeSing'
  Mode.OnSing = 'Sing'
  Mode.AfterSing = 'StopVibrations'

  Usdx.Party.Register(Mode)

  -- it looks like in usdx plug-ins, `require` cannot be used on module scope, 
  -- only in plugin_init() – and it always returns nil. Henceforth, I must alias
  -- the loaded module explicitly (this is also necessary in dependencies :o)
  require("buttplug")
  local buttplug = package.loaded.buttplug
  -- do not print debug output to console by default
  buttplug.print = nop
  
  -- Ask for the device list after we connect
  table.insert(buttplug.cb.ServerInfo, function()
    buttplug.request_device_list()
  end)
  -- Start scanning if the device list was empty
  table.insert(buttplug.cb.DeviceList, function()
    if buttplug.count_devices() == 0 then
      buttplug.start_scanning()
    end
  end)
  -- Stop scanning after the first device is found
  table.insert(buttplug.cb.DeviceAdded, function()
    buttplug.stop_scanning()
  end)
  -- Start scanning if we lose a device
  table.insert(buttplug.cb.DeviceRemoved, function()
    buttplug.start_scanning()
  end)
  buttplug.connect("ultrastar-deluxe", "ws://127.0.0.1:12345")

  return true
end

-- keep track of each player's minimum rating throughout the song
-- the rating starts with 0.5 by default and I do not want to startle
-- the player right at the start of the song
local lowestRatings = nil

function BeforeSing()
  -- reset ratings
  -- TODO: find out if this is necessary
  lowestRatings = nil
  return true;
end;

local previous_ms = 0
function Sing()
  local buttplug = package.loaded.buttplug
  local err = buttplug.get_and_handle_message()
  if err ~= nil then
    print("buttplug error: no connection to server") -- TODO: log via usdx.log
    return true
  end

  -- Change vibration intensity every update_interval_ms
  if Usdx.Time() - previous_ms > update_interval_ms then
    previous_ms = Usdx.Time()
    local ratings = Usdx.ScreenSing.GetRating()
    if lowestRatings == nil then
      lowestRatings = ratings
    end
    -- record lowest ratings
    for r = 1, #ratings do
      lowestRatings[r] = math.min(lowestRatings[r], ratings[r])
    end
    
    local teams = Party.GetTeams()
    for t = 1, #teams do
      -- buttplug indexes devices starting with 0, lua tables start with 1
      -- this assumes player #1 wears buttplug #0
      local buttplug_device_index = t-1
      if buttplug.count_devices() > buttplug_device_index then
        -- the intensity increases according to the rating
        -- adjusted for each player's personal minimum rating
        local intensity = (ratings[t]-lowestRatings[t])/(1-lowestRatings[t])
        --print("Player "..t.." rating is "..ratings[t].." minimum is "..lowestRatings[t].." vibration intensity now is "..intensity)
        buttplug.send_vibrate_cmd(buttplug_device_index, { math.max(intensity, 0) })
      end
    end
  end

  return true
end

function StopVibrations()
  local buttplug = package.loaded.buttplug

  for device_index = 0, buttplug.count_devices()-1 do
      buttplug.send_vibrate_cmd(device_index, { 0 })
  end

  return true
end
